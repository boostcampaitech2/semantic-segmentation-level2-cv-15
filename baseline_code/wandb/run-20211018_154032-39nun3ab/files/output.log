Number of super categories: 10
Number of categories: 10
Number of annotations: 26240
Number of images: 3272
loading annotations into memory...
Done (t=3.70s)
creating index...
index created!
loading annotations into memory...
Done (t=2.28s)
creating index...
index created!
loading annotations into memory...
Done (t=0.02s)
creating index...
index created!
image shape: [3, 512, 512]
mask shape:  [512, 512]
Unique values, category of transformed mask :
 [{0, 'Backgroud'}, {2, 'Paper'}, {8, 'Plastic bag'}]
image shape: [3, 512, 512]
mask shape:  [512, 512]
Unique values, category of transformed mask :
 [{0, 'Backgroud'}, {'Glass', 5}, {'Plastic', 6}, {8, 'Plastic bag'}]
image shape: [3, 512, 512]
input shape : torch.Size([2, 3, 512, 512])
output shape : torch.Size([2, 11, 512, 512])
Start training..
Epoch [1/100], Step [25/219],                         Loss: 1.2382, mIoU: 0.1579
Epoch [1/100], Step [50/219],                         Loss: 1.018, mIoU: 0.1845
Epoch [1/100], Step [75/219],                         Loss: 0.8504, mIoU: 0.1969
Epoch [1/100], Step [100/219],                         Loss: 1.0109, mIoU: 0.203
Epoch [1/100], Step [125/219],                         Loss: 0.492, mIoU: 0.2105
Epoch [1/100], Step [150/219],                         Loss: 0.6958, mIoU: 0.2132
Epoch [1/100], Step [175/219],                         Loss: 0.5216, mIoU: 0.2179
Epoch [1/100], Step [200/219],                         Loss: 0.5943, mIoU: 0.2232
Start validation #1
Validation #1  Average Loss: 0.5046, Accuracy : 0.8778,                 mIoU: 0.3094
IoU by class : [{'Backgroud': 0.9295}, {'General trash': 0.2155}, {'Paper': 0.6054}, {'Paper pack': 0.0}, {'Metal': 0.0}, {'Glass': 0.2617}, {'Plastic': 0.232}, {'Styrofoam': 0.4341}, {'Plastic bag': 0.7252}, {'Battery': 0.0}, {'Clothing': 0.0}]
Start training..
Start training..
Epoch [1/100], Step [25/219],                         Loss: 0.647, mIoU: 0.2747
Epoch [1/100], Step [50/219],                         Loss: 0.3111, mIoU: 0.3084
Exception in thread Thread-21:
Traceback (most recent call last):
  File "/opt/conda/envs/segmentation/lib/python3.7/threading.py", line 926, in _bootstrap_inner
    self.run()
  File "/opt/conda/envs/segmentation/lib/python3.7/threading.py", line 870, in run
    self._target(*self._args, **self._kwargs)
  File "/opt/conda/envs/segmentation/lib/python3.7/site-packages/wandb/sdk/wandb_run.py", line 215, in check_status
    status_response = self._interface.communicate_stop_status()
  File "/opt/conda/envs/segmentation/lib/python3.7/site-packages/wandb/sdk/interface/interface.py", line 737, in communicate_stop_status
    resp = self._communicate(req, timeout=timeout, local=True)
  File "/opt/conda/envs/segmentation/lib/python3.7/site-packages/wandb/sdk/interface/interface.py", line 539, in _communicate
    return self._communicate_async(rec, local=local).get(timeout=timeout)
  File "/opt/conda/envs/segmentation/lib/python3.7/site-packages/wandb/sdk/interface/interface.py", line 544, in _communicate_async
    raise Exception("The wandb backend process has shutdown")
Exception: The wandb backend process has shutdown
Exception in thread Thread-22:
Traceback (most recent call last):
  File "/opt/conda/envs/segmentation/lib/python3.7/threading.py", line 926, in _bootstrap_inner
    self.run()
  File "/opt/conda/envs/segmentation/lib/python3.7/threading.py", line 870, in run
    self._target(*self._args, **self._kwargs)
  File "/opt/conda/envs/segmentation/lib/python3.7/site-packages/wandb/sdk/wandb_run.py", line 197, in check_network_status
    status_response = self._interface.communicate_network_status()
  File "/opt/conda/envs/segmentation/lib/python3.7/site-packages/wandb/sdk/interface/interface.py", line 749, in communicate_network_status
    resp = self._communicate(req, timeout=timeout, local=True)
  File "/opt/conda/envs/segmentation/lib/python3.7/site-packages/wandb/sdk/interface/interface.py", line 539, in _communicate
    return self._communicate_async(rec, local=local).get(timeout=timeout)
  File "/opt/conda/envs/segmentation/lib/python3.7/site-packages/wandb/sdk/interface/interface.py", line 544, in _communicate_async
    raise Exception("The wandb backend process has shutdown")
